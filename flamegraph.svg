<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="9265"><g><title>dft`&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0108%" y="261" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.2608%" y="271.50"></text></g><g><title>dft`&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.0108%" y="245" width="0.0108%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2608%" y="255.50"></text></g><g><title>dft`cassowary::Row::solve_for_symbols (3 samples, 0.03%)</title><rect x="0.0000%" y="293" width="0.0324%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="303.50"></text></g><g><title>dft`cassowary::Row::solve_for_symbol (3 samples, 0.03%)</title><rect x="0.0000%" y="277" width="0.0324%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="287.50"></text></g><g><title>dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.01%)</title><rect x="0.0216%" y="261" width="0.0108%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2716%" y="271.50"></text></g><g><title>dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="0.0216%" y="245" width="0.0108%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2716%" y="255.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="0.0216%" y="229" width="0.0108%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2716%" y="239.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="0.0216%" y="213" width="0.0108%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2716%" y="223.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="0.0216%" y="197" width="0.0108%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2716%" y="207.50"></text></g><g><title>dft`cassowary::Symbol::type_ (1 samples, 0.01%)</title><rect x="0.0324%" y="293" width="0.0108%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.2824%" y="303.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="0.1727%" y="277" width="0.0216%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="2"/><text x="0.4227%" y="287.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.2159%" y="229" width="0.0216%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="2"/><text x="0.4659%" y="239.50"></text></g><g><title>dft`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.08%)</title><rect x="0.1943%" y="277" width="0.0756%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="7"/><text x="0.4443%" y="287.50"></text></g><g><title>dft`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.08%)</title><rect x="0.1943%" y="261" width="0.0756%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="7"/><text x="0.4443%" y="271.50"></text></g><g><title>dft`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="0.2159%" y="245" width="0.0540%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="5"/><text x="0.4659%" y="255.50"></text></g><g><title>dft`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.03%)</title><rect x="0.2375%" y="229" width="0.0324%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="3"/><text x="0.4875%" y="239.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="0.2806%" y="197" width="0.0108%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="1"/><text x="0.5306%" y="207.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="0.2914%" y="197" width="0.0108%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="1"/><text x="0.5414%" y="207.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.14%)</title><rect x="0.2806%" y="213" width="0.1403%" height="15" fill="rgb(221,200,47)" fg:x="26" fg:w="13"/><text x="0.5306%" y="223.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.12%)</title><rect x="0.3022%" y="197" width="0.1187%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="11"/><text x="0.5522%" y="207.50"></text></g><g><title>dft`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.03%)</title><rect x="0.4209%" y="213" width="0.0324%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="3"/><text x="0.6709%" y="223.50"></text></g><g><title>dft`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="0.4533%" y="213" width="0.0216%" height="15" fill="rgb(235,183,28)" fg:x="42" fg:w="2"/><text x="0.7033%" y="223.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="0.4857%" y="85" width="0.0108%" height="15" fill="rgb(221,5,38)" fg:x="45" fg:w="1"/><text x="0.7357%" y="95.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="0.4749%" y="101" width="0.0324%" height="15" fill="rgb(247,18,42)" fg:x="44" fg:w="3"/><text x="0.7249%" y="111.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="0.4965%" y="85" width="0.0108%" height="15" fill="rgb(241,131,45)" fg:x="46" fg:w="1"/><text x="0.7465%" y="95.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::hash::Hash&gt;::hash (7 samples, 0.08%)</title><rect x="0.4749%" y="181" width="0.0756%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="7"/><text x="0.7249%" y="191.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for isize&gt;::hash (7 samples, 0.08%)</title><rect x="0.4749%" y="165" width="0.0756%" height="15" fill="rgb(225,111,53)" fg:x="44" fg:w="7"/><text x="0.7249%" y="175.50"></text></g><g><title>dft`core::hash::Hasher::write_isize (7 samples, 0.08%)</title><rect x="0.4749%" y="149" width="0.0756%" height="15" fill="rgb(238,160,17)" fg:x="44" fg:w="7"/><text x="0.7249%" y="159.50"></text></g><g><title>dft`core::hash::Hasher::write_usize (7 samples, 0.08%)</title><rect x="0.4749%" y="133" width="0.0756%" height="15" fill="rgb(214,148,48)" fg:x="44" fg:w="7"/><text x="0.7249%" y="143.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.08%)</title><rect x="0.4749%" y="117" width="0.0756%" height="15" fill="rgb(232,36,49)" fg:x="44" fg:w="7"/><text x="0.7249%" y="127.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.04%)</title><rect x="0.5073%" y="101" width="0.0432%" height="15" fill="rgb(209,103,24)" fg:x="47" fg:w="4"/><text x="0.7573%" y="111.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="0.5936%" y="117" width="0.0216%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="2"/><text x="0.8436%" y="127.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.06%)</title><rect x="0.5613%" y="133" width="0.0648%" height="15" fill="rgb(213,181,19)" fg:x="52" fg:w="6"/><text x="0.8113%" y="143.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="0.6152%" y="117" width="0.0108%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="1"/><text x="0.8652%" y="127.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::hash::Hash&gt;::hash (19 samples, 0.21%)</title><rect x="0.4749%" y="197" width="0.2051%" height="15" fill="rgb(241,83,37)" fg:x="44" fg:w="19"/><text x="0.7249%" y="207.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (12 samples, 0.13%)</title><rect x="0.5505%" y="181" width="0.1295%" height="15" fill="rgb(233,36,39)" fg:x="51" fg:w="12"/><text x="0.8005%" y="191.50"></text></g><g><title>dft`core::hash::Hasher::write_usize (11 samples, 0.12%)</title><rect x="0.5613%" y="165" width="0.1187%" height="15" fill="rgb(226,3,54)" fg:x="52" fg:w="11"/><text x="0.8113%" y="175.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.12%)</title><rect x="0.5613%" y="149" width="0.1187%" height="15" fill="rgb(245,192,40)" fg:x="52" fg:w="11"/><text x="0.8113%" y="159.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.05%)</title><rect x="0.6260%" y="133" width="0.0540%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="5"/><text x="0.8760%" y="143.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.22%)</title><rect x="0.4749%" y="213" width="0.2159%" height="15" fill="rgb(232,182,51)" fg:x="44" fg:w="20"/><text x="0.7249%" y="223.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="0.6800%" y="197" width="0.0108%" height="15" fill="rgb(231,60,39)" fg:x="63" fg:w="1"/><text x="0.9300%" y="207.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (40 samples, 0.43%)</title><rect x="0.2698%" y="229" width="0.4317%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="40"/><text x="0.5198%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="0.6908%" y="213" width="0.0108%" height="15" fill="rgb(235,93,37)" fg:x="64" fg:w="1"/><text x="0.9408%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="0.7016%" y="229" width="0.0216%" height="15" fill="rgb(213,116,39)" fg:x="65" fg:w="2"/><text x="0.9516%" y="239.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.7339%" y="213" width="0.0216%" height="15" fill="rgb(222,207,29)" fg:x="68" fg:w="2"/><text x="0.9839%" y="223.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="0.7555%" y="213" width="0.0108%" height="15" fill="rgb(206,96,30)" fg:x="70" fg:w="1"/><text x="1.0055%" y="223.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (12 samples, 0.13%)</title><rect x="0.8419%" y="197" width="0.1295%" height="15" fill="rgb(218,138,4)" fg:x="78" fg:w="12"/><text x="1.0919%" y="207.50"></text></g><g><title>dft`core::ptr::read_unaligned (10 samples, 0.11%)</title><rect x="0.8635%" y="181" width="0.1079%" height="15" fill="rgb(250,191,14)" fg:x="80" fg:w="10"/><text x="1.1135%" y="191.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.10%)</title><rect x="0.8743%" y="165" width="0.0971%" height="15" fill="rgb(239,60,40)" fg:x="81" fg:w="9"/><text x="1.1243%" y="175.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (6 samples, 0.06%)</title><rect x="0.9066%" y="149" width="0.0648%" height="15" fill="rgb(206,27,48)" fg:x="84" fg:w="6"/><text x="1.1566%" y="159.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vceq_u8 (1 samples, 0.01%)</title><rect x="0.9714%" y="197" width="0.0108%" height="15" fill="rgb(225,35,8)" fg:x="90" fg:w="1"/><text x="1.2214%" y="207.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="0.9822%" y="197" width="0.0108%" height="15" fill="rgb(250,213,24)" fg:x="91" fg:w="1"/><text x="1.2322%" y="207.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vget_lane_u64 (1 samples, 0.01%)</title><rect x="0.9930%" y="197" width="0.0108%" height="15" fill="rgb(247,123,22)" fg:x="92" fg:w="1"/><text x="1.2430%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="1.0038%" y="197" width="0.0108%" height="15" fill="rgb(231,138,38)" fg:x="93" fg:w="1"/><text x="1.2538%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (28 samples, 0.30%)</title><rect x="0.7663%" y="213" width="0.3022%" height="15" fill="rgb(231,145,46)" fg:x="71" fg:w="28"/><text x="1.0163%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.05%)</title><rect x="1.0146%" y="197" width="0.0540%" height="15" fill="rgb(251,118,11)" fg:x="94" fg:w="5"/><text x="1.2646%" y="207.50"></text></g><g><title>dft`hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.02%)</title><rect x="1.0470%" y="181" width="0.0216%" height="15" fill="rgb(217,147,25)" fg:x="97" fg:w="2"/><text x="1.2970%" y="191.50"></text></g><g><title>dft`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.02%)</title><rect x="1.0470%" y="165" width="0.0216%" height="15" fill="rgb(247,81,37)" fg:x="97" fg:w="2"/><text x="1.2970%" y="175.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="1.0470%" y="149" width="0.0216%" height="15" fill="rgb(209,12,38)" fg:x="97" fg:w="2"/><text x="1.2970%" y="159.50"></text></g><g><title>dft`cassowary::Row::coefficient_for (75 samples, 0.81%)</title><rect x="0.2698%" y="277" width="0.8095%" height="15" fill="rgb(227,1,9)" fg:x="25" fg:w="75"/><text x="0.5198%" y="287.50"></text></g><g><title>dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (75 samples, 0.81%)</title><rect x="0.2698%" y="261" width="0.8095%" height="15" fill="rgb(248,47,43)" fg:x="25" fg:w="75"/><text x="0.5198%" y="271.50"></text></g><g><title>dft`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (75 samples, 0.81%)</title><rect x="0.2698%" y="245" width="0.8095%" height="15" fill="rgb(221,10,30)" fg:x="25" fg:w="75"/><text x="0.5198%" y="255.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::get (33 samples, 0.36%)</title><rect x="0.7232%" y="229" width="0.3562%" height="15" fill="rgb(210,229,1)" fg:x="67" fg:w="33"/><text x="0.9732%" y="239.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_byte (1 samples, 0.01%)</title><rect x="1.0685%" y="213" width="0.0108%" height="15" fill="rgb(222,148,37)" fg:x="99" fg:w="1"/><text x="1.3185%" y="223.50"></text></g><g><title>dft`cassowary::solver_impl::Solver::get_leaving_row (98 samples, 1.06%)</title><rect x="0.0432%" y="293" width="1.0577%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="98"/><text x="0.2932%" y="303.50"></text></g><g><title>dft`core::option::Option&lt;T&gt;::unwrap_or (2 samples, 0.02%)</title><rect x="1.0793%" y="277" width="0.0216%" height="15" fill="rgb(247,98,35)" fg:x="100" fg:w="2"/><text x="1.3293%" y="287.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="1.1657%" y="229" width="0.0324%" height="15" fill="rgb(247,138,52)" fg:x="108" fg:w="3"/><text x="1.4157%" y="239.50"></text></g><g><title>dft`&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="1.1225%" y="277" width="0.0863%" height="15" fill="rgb(213,79,30)" fg:x="104" fg:w="8"/><text x="1.3725%" y="287.50"></text></g><g><title>dft`&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="1.1225%" y="261" width="0.0863%" height="15" fill="rgb(246,177,23)" fg:x="104" fg:w="8"/><text x="1.3725%" y="271.50"></text></g><g><title>dft`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.06%)</title><rect x="1.1441%" y="245" width="0.0648%" height="15" fill="rgb(230,62,27)" fg:x="106" fg:w="6"/><text x="1.3941%" y="255.50"></text></g><g><title>dft`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="1.1981%" y="229" width="0.0108%" height="15" fill="rgb(216,154,8)" fg:x="111" fg:w="1"/><text x="1.4481%" y="239.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::generated::vcgez_s8 (1 samples, 0.01%)</title><rect x="1.1981%" y="213" width="0.0108%" height="15" fill="rgb(244,35,45)" fg:x="111" fg:w="1"/><text x="1.4481%" y="223.50"></text></g><g><title>dft`&lt;&amp;f64 as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (64 samples, 0.69%)</title><rect x="1.2196%" y="261" width="0.6908%" height="15" fill="rgb(251,115,12)" fg:x="113" fg:w="64"/><text x="1.4696%" y="271.50"></text></g><g><title>dft`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.08%)</title><rect x="1.9104%" y="261" width="0.0756%" height="15" fill="rgb(240,54,50)" fg:x="177" fg:w="7"/><text x="2.1604%" y="271.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (7 samples, 0.08%)</title><rect x="2.5688%" y="197" width="0.0756%" height="15" fill="rgb(233,84,52)" fg:x="238" fg:w="7"/><text x="2.8188%" y="207.50"></text></g><g><title>dft`core::ptr::read_unaligned (5 samples, 0.05%)</title><rect x="2.5904%" y="181" width="0.0540%" height="15" fill="rgb(207,117,47)" fg:x="240" fg:w="5"/><text x="2.8404%" y="191.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.04%)</title><rect x="2.6012%" y="165" width="0.0432%" height="15" fill="rgb(249,43,39)" fg:x="241" fg:w="4"/><text x="2.8512%" y="175.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.01%)</title><rect x="2.6336%" y="149" width="0.0108%" height="15" fill="rgb(209,38,44)" fg:x="244" fg:w="1"/><text x="2.8836%" y="159.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (1 samples, 0.01%)</title><rect x="2.6444%" y="197" width="0.0108%" height="15" fill="rgb(236,212,23)" fg:x="245" fg:w="1"/><text x="2.8944%" y="207.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="2.6552%" y="197" width="0.0108%" height="15" fill="rgb(242,79,21)" fg:x="246" fg:w="1"/><text x="2.9052%" y="207.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.02%)</title><rect x="2.6659%" y="197" width="0.0216%" height="15" fill="rgb(211,96,35)" fg:x="247" fg:w="2"/><text x="2.9159%" y="207.50"></text></g><g><title>dft`hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (13 samples, 0.14%)</title><rect x="2.5580%" y="229" width="0.1403%" height="15" fill="rgb(253,215,40)" fg:x="237" fg:w="13"/><text x="2.8080%" y="239.50"></text></g><g><title>dft`hashbrown::raw::RawIterRange&lt;T&gt;::new (12 samples, 0.13%)</title><rect x="2.5688%" y="213" width="0.1295%" height="15" fill="rgb(211,81,21)" fg:x="238" fg:w="12"/><text x="2.8188%" y="223.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_full (1 samples, 0.01%)</title><rect x="2.6875%" y="197" width="0.0108%" height="15" fill="rgb(208,190,38)" fg:x="249" fg:w="1"/><text x="2.9375%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.02%)</title><rect x="2.6983%" y="229" width="0.0216%" height="15" fill="rgb(235,213,38)" fg:x="250" fg:w="2"/><text x="2.9483%" y="239.50"></text></g><g><title>dft`&lt;&amp;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (17 samples, 0.18%)</title><rect x="2.5580%" y="245" width="0.1835%" height="15" fill="rgb(237,122,38)" fg:x="237" fg:w="17"/><text x="2.8080%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="2.7199%" y="229" width="0.0216%" height="15" fill="rgb(244,218,35)" fg:x="252" fg:w="2"/><text x="2.9699%" y="239.50"></text></g><g><title>dft`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.09%)</title><rect x="2.7415%" y="245" width="0.0863%" height="15" fill="rgb(240,68,47)" fg:x="254" fg:w="8"/><text x="2.9915%" y="255.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (365 samples, 3.94%)</title><rect x="4.3821%" y="197" width="3.9396%" height="15" fill="rgb(210,16,53)" fg:x="406" fg:w="365"/><text x="4.6321%" y="207.50">dft`..</text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.02%)</title><rect x="8.3216%" y="197" width="0.0216%" height="15" fill="rgb(235,124,12)" fg:x="771" fg:w="2"/><text x="8.5716%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::next_n (98 samples, 1.06%)</title><rect x="8.3432%" y="197" width="1.0577%" height="15" fill="rgb(224,169,11)" fg:x="773" fg:w="98"/><text x="8.5932%" y="207.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::generated::vcgez_s8 (40 samples, 0.43%)</title><rect x="10.0162%" y="181" width="0.4317%" height="15" fill="rgb(250,166,2)" fg:x="928" fg:w="40"/><text x="10.2662%" y="191.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (10 samples, 0.11%)</title><rect x="10.4695%" y="165" width="0.1079%" height="15" fill="rgb(242,216,29)" fg:x="970" fg:w="10"/><text x="10.7195%" y="175.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (87 samples, 0.94%)</title><rect x="10.4479%" y="181" width="0.9390%" height="15" fill="rgb(230,116,27)" fg:x="968" fg:w="87"/><text x="10.6979%" y="191.50"></text></g><g><title>dft`core::ptr::read_unaligned (75 samples, 0.81%)</title><rect x="10.5774%" y="165" width="0.8095%" height="15" fill="rgb(228,99,48)" fg:x="980" fg:w="75"/><text x="10.8274%" y="175.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (51 samples, 0.55%)</title><rect x="10.8365%" y="149" width="0.5505%" height="15" fill="rgb(253,11,6)" fg:x="1004" fg:w="51"/><text x="11.0865%" y="159.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (26 samples, 0.28%)</title><rect x="11.1063%" y="133" width="0.2806%" height="15" fill="rgb(247,143,39)" fg:x="1029" fg:w="26"/><text x="11.3563%" y="143.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (38 samples, 0.41%)</title><rect x="11.3869%" y="181" width="0.4101%" height="15" fill="rgb(236,97,10)" fg:x="1055" fg:w="38"/><text x="11.6369%" y="191.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (63 samples, 0.68%)</title><rect x="11.7971%" y="181" width="0.6800%" height="15" fill="rgb(233,208,19)" fg:x="1093" fg:w="63"/><text x="12.0471%" y="191.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vget_lane_u64 (41 samples, 0.44%)</title><rect x="12.4771%" y="181" width="0.4425%" height="15" fill="rgb(216,164,2)" fg:x="1156" fg:w="41"/><text x="12.7271%" y="191.50"></text></g><g><title>dft`core::ptr::read_unaligned (6 samples, 0.06%)</title><rect x="12.9196%" y="181" width="0.0648%" height="15" fill="rgb(220,129,5)" fg:x="1197" fg:w="6"/><text x="13.1696%" y="191.50"></text></g><g><title>dft`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (857 samples, 9.25%)</title><rect x="3.7561%" y="213" width="9.2499%" height="15" fill="rgb(242,17,10)" fg:x="348" fg:w="857"/><text x="4.0061%" y="223.50">dft`&lt;hashbrow..</text></g><g><title>dft`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (334 samples, 3.60%)</title><rect x="9.4010%" y="197" width="3.6050%" height="15" fill="rgb(242,107,0)" fg:x="871" fg:w="334"/><text x="9.6510%" y="207.50">dft`..</text></g><g><title>dft`hashbrown::raw::neon::Group::match_full (2 samples, 0.02%)</title><rect x="12.9843%" y="181" width="0.0216%" height="15" fill="rgb(251,28,31)" fg:x="1203" fg:w="2"/><text x="13.2343%" y="191.50"></text></g><g><title>dft`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (944 samples, 10.19%)</title><rect x="2.8278%" y="245" width="10.1889%" height="15" fill="rgb(233,223,10)" fg:x="262" fg:w="944"/><text x="3.0778%" y="255.50">dft`&lt;std::colle..</text></g><g><title>dft`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (937 samples, 10.11%)</title><rect x="2.9034%" y="229" width="10.1133%" height="15" fill="rgb(215,21,27)" fg:x="269" fg:w="937"/><text x="3.1534%" y="239.50">dft`&lt;hashbrown:..</text></g><g><title>dft`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.01%)</title><rect x="13.0059%" y="213" width="0.0108%" height="15" fill="rgb(232,23,21)" fg:x="1205" fg:w="1"/><text x="13.2559%" y="223.50"></text></g><g><title>dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="13.9557%" y="229" width="0.0108%" height="15" fill="rgb(244,5,23)" fg:x="1293" fg:w="1"/><text x="14.2057%" y="239.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="16.3734%" y="213" width="0.0324%" height="15" fill="rgb(226,81,46)" fg:x="1517" fg:w="3"/><text x="16.6234%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (95 samples, 1.03%)</title><rect x="16.4058%" y="213" width="1.0254%" height="15" fill="rgb(247,70,30)" fg:x="1520" fg:w="95"/><text x="16.6558%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="17.4312%" y="213" width="0.0108%" height="15" fill="rgb(212,68,19)" fg:x="1615" fg:w="1"/><text x="17.6812%" y="223.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (160 samples, 1.73%)</title><rect x="21.5326%" y="197" width="1.7269%" height="15" fill="rgb(240,187,13)" fg:x="1995" fg:w="160"/><text x="21.7826%" y="207.50"></text></g><g><title>dft`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.11%)</title><rect x="23.2596%" y="197" width="0.1079%" height="15" fill="rgb(223,113,26)" fg:x="2155" fg:w="10"/><text x="23.5096%" y="207.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.02%)</title><rect x="23.3675%" y="197" width="0.0216%" height="15" fill="rgb(206,192,2)" fg:x="2165" fg:w="2"/><text x="23.6175%" y="207.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::hash::Hash&gt;::hash (6 samples, 0.06%)</title><rect x="23.9611%" y="181" width="0.0648%" height="15" fill="rgb(241,108,4)" fg:x="2220" fg:w="6"/><text x="24.2111%" y="191.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.01%)</title><rect x="24.0259%" y="181" width="0.0108%" height="15" fill="rgb(247,173,49)" fg:x="2226" fg:w="1"/><text x="24.2759%" y="191.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (62 samples, 0.67%)</title><rect x="24.1662%" y="165" width="0.6692%" height="15" fill="rgb(224,114,35)" fg:x="2239" fg:w="62"/><text x="24.4162%" y="175.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (254 samples, 2.74%)</title><rect x="24.8354%" y="165" width="2.7415%" height="15" fill="rgb(245,159,27)" fg:x="2301" fg:w="254"/><text x="25.0854%" y="175.50">df..</text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,503 samples, 16.22%)</title><rect x="24.0367%" y="181" width="16.2223%" height="15" fill="rgb(245,172,44)" fg:x="2227" fg:w="1503"/><text x="24.2867%" y="191.50">dft`&lt;std::hash::random::D..</text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,175 samples, 12.68%)</title><rect x="27.5769%" y="165" width="12.6821%" height="15" fill="rgb(236,23,11)" fg:x="2555" fg:w="1175"/><text x="27.8269%" y="175.50">dft`&lt;core::hash::si..</text></g><g><title>dft`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (302 samples, 3.26%)</title><rect x="40.2590%" y="181" width="3.2596%" height="15" fill="rgb(205,117,38)" fg:x="3730" fg:w="302"/><text x="40.5090%" y="191.50">dft..</text></g><g><title>dft`DYLD-STUB$$memcpy (26 samples, 0.28%)</title><rect x="43.5186%" y="181" width="0.2806%" height="15" fill="rgb(237,72,25)" fg:x="4032" fg:w="26"/><text x="43.7686%" y="191.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="44.7383%" y="101" width="0.0324%" height="15" fill="rgb(244,70,9)" fg:x="4145" fg:w="3"/><text x="44.9883%" y="111.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.10%)</title><rect x="44.8246%" y="85" width="0.0971%" height="15" fill="rgb(217,125,39)" fg:x="4153" fg:w="9"/><text x="45.0746%" y="95.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (82 samples, 0.89%)</title><rect x="46.7890%" y="53" width="0.8851%" height="15" fill="rgb(235,36,10)" fg:x="4335" fg:w="82"/><text x="47.0390%" y="63.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (511 samples, 5.52%)</title><rect x="45.1268%" y="69" width="5.5154%" height="15" fill="rgb(251,123,47)" fg:x="4181" fg:w="511"/><text x="45.3768%" y="79.50">dft`&lt;co..</text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (275 samples, 2.97%)</title><rect x="47.6740%" y="53" width="2.9682%" height="15" fill="rgb(221,13,13)" fg:x="4417" fg:w="275"/><text x="47.9240%" y="63.50">dft..</text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (165 samples, 1.78%)</title><rect x="48.8613%" y="37" width="1.7809%" height="15" fill="rgb(238,131,9)" fg:x="4527" fg:w="165"/><text x="49.1113%" y="47.50">d..</text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (366 samples, 3.95%)</title><rect x="50.6422%" y="69" width="3.9504%" height="15" fill="rgb(211,50,8)" fg:x="4692" fg:w="366"/><text x="50.8922%" y="79.50">dft`..</text></g><g><title>dft`core::hash::Hasher::write_isize (928 samples, 10.02%)</title><rect x="44.6519%" y="117" width="10.0162%" height="15" fill="rgb(245,182,24)" fg:x="4137" fg:w="928"/><text x="44.9019%" y="127.50">dft`core::hash..</text></g><g><title>dft`core::hash::Hasher::write_usize (917 samples, 9.90%)</title><rect x="44.7706%" y="101" width="9.8975%" height="15" fill="rgb(242,14,37)" fg:x="4148" fg:w="917"/><text x="45.0206%" y="111.50">dft`core::hash..</text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (903 samples, 9.75%)</title><rect x="44.9217%" y="85" width="9.7464%" height="15" fill="rgb(246,228,12)" fg:x="4162" fg:w="903"/><text x="45.1717%" y="95.50">dft`&lt;std::hash..</text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (7 samples, 0.08%)</title><rect x="54.5926%" y="69" width="0.0756%" height="15" fill="rgb(213,55,15)" fg:x="5058" fg:w="7"/><text x="54.8426%" y="79.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::hash::Hash&gt;::hash (1,008 samples, 10.88%)</title><rect x="44.0367%" y="149" width="10.8797%" height="15" fill="rgb(209,9,3)" fg:x="4080" fg:w="1008"/><text x="44.2867%" y="159.50">dft`&lt;cassowary::..</text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for isize&gt;::hash (1,000 samples, 10.79%)</title><rect x="44.1230%" y="133" width="10.7933%" height="15" fill="rgb(230,59,30)" fg:x="4088" fg:w="1000"/><text x="44.3730%" y="143.50">dft`core::hash::..</text></g><g><title>dft`core::hash::Hasher::write_usize (23 samples, 0.25%)</title><rect x="54.6681%" y="117" width="0.2482%" height="15" fill="rgb(209,121,21)" fg:x="5065" fg:w="23"/><text x="54.9181%" y="127.50"></text></g><g><title>dft`core::hash::Hasher::write_usize (14 samples, 0.15%)</title><rect x="54.9164%" y="149" width="0.1511%" height="15" fill="rgb(220,109,13)" fg:x="5088" fg:w="14"/><text x="55.1664%" y="159.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for isize&gt;::hash (10 samples, 0.11%)</title><rect x="55.0675%" y="149" width="0.1079%" height="15" fill="rgb(232,18,1)" fg:x="5102" fg:w="10"/><text x="55.3175%" y="159.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.14%)</title><rect x="55.3265%" y="133" width="0.1403%" height="15" fill="rgb(215,41,42)" fg:x="5126" fg:w="13"/><text x="55.5765%" y="143.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.06%)</title><rect x="55.5424%" y="117" width="0.0648%" height="15" fill="rgb(224,123,36)" fg:x="5146" fg:w="6"/><text x="55.7924%" y="127.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (113 samples, 1.22%)</title><rect x="58.2515%" y="85" width="1.2196%" height="15" fill="rgb(240,125,3)" fg:x="5397" fg:w="113"/><text x="58.5015%" y="95.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (614 samples, 6.63%)</title><rect x="55.6827%" y="101" width="6.6271%" height="15" fill="rgb(205,98,50)" fg:x="5159" fg:w="614"/><text x="55.9327%" y="111.50">dft`&lt;core..</text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (263 samples, 2.84%)</title><rect x="59.4711%" y="85" width="2.8386%" height="15" fill="rgb(205,185,37)" fg:x="5510" fg:w="263"/><text x="59.7211%" y="95.50">df..</text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (106 samples, 1.14%)</title><rect x="61.1657%" y="69" width="1.1441%" height="15" fill="rgb(238,207,15)" fg:x="5667" fg:w="106"/><text x="61.4157%" y="79.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (266 samples, 2.87%)</title><rect x="62.3098%" y="101" width="2.8710%" height="15" fill="rgb(213,199,42)" fg:x="5773" fg:w="266"/><text x="62.5598%" y="111.50">df..</text></g><g><title>dft`&lt;cassowary::Symbol as core::hash::Hash&gt;::hash (1,976 samples, 21.33%)</title><rect x="43.9072%" y="165" width="21.3276%" height="15" fill="rgb(235,201,11)" fg:x="4068" fg:w="1976"/><text x="44.1572%" y="175.50">dft`&lt;cassowary::Symbol as core::ha..</text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (932 samples, 10.06%)</title><rect x="55.1754%" y="149" width="10.0594%" height="15" fill="rgb(207,46,11)" fg:x="5112" fg:w="932"/><text x="55.4254%" y="159.50">dft`core::hash:..</text></g><g><title>dft`core::hash::Hasher::write_usize (905 samples, 9.77%)</title><rect x="55.4668%" y="133" width="9.7679%" height="15" fill="rgb(241,35,35)" fg:x="5139" fg:w="905"/><text x="55.7168%" y="143.50">dft`core::hash..</text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (892 samples, 9.63%)</title><rect x="55.6071%" y="117" width="9.6276%" height="15" fill="rgb(243,32,47)" fg:x="5152" fg:w="892"/><text x="55.8571%" y="127.50">dft`&lt;std::hash..</text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.05%)</title><rect x="65.1808%" y="101" width="0.0540%" height="15" fill="rgb(247,202,23)" fg:x="6039" fg:w="5"/><text x="65.4308%" y="111.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,990 samples, 21.48%)</title><rect x="43.7992%" y="181" width="21.4787%" height="15" fill="rgb(219,102,11)" fg:x="4058" fg:w="1990"/><text x="44.0492%" y="191.50">dft`core::hash::impls::_&lt;impl core..</text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.04%)</title><rect x="65.2348%" y="165" width="0.0432%" height="15" fill="rgb(243,110,44)" fg:x="6044" fg:w="4"/><text x="65.4848%" y="175.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (4,223 samples, 45.58%)</title><rect x="23.3891%" y="197" width="45.5801%" height="15" fill="rgb(222,74,54)" fg:x="2167" fg:w="4223"/><text x="23.6391%" y="207.50">dft`core::hash::BuildHasher::hash_one</text></g><g><title>libsystem_platform.dylib`_platform_memmove (342 samples, 3.69%)</title><rect x="65.2779%" y="181" width="3.6913%" height="15" fill="rgb(216,99,12)" fg:x="6048" fg:w="342"/><text x="65.5279%" y="191.50">libs..</text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (160 samples, 1.73%)</title><rect x="68.9692%" y="197" width="1.7269%" height="15" fill="rgb(226,22,26)" fg:x="6390" fg:w="160"/><text x="69.2192%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (439 samples, 4.74%)</title><rect x="70.6962%" y="197" width="4.7383%" height="15" fill="rgb(217,163,10)" fg:x="6550" fg:w="439"/><text x="70.9462%" y="207.50">dft`ha..</text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (9 samples, 0.10%)</title><rect x="75.4344%" y="197" width="0.0971%" height="15" fill="rgb(213,25,53)" fg:x="6989" fg:w="9"/><text x="75.6844%" y="207.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.10%)</title><rect x="75.8662%" y="165" width="0.0971%" height="15" fill="rgb(252,105,26)" fg:x="7029" fg:w="9"/><text x="76.1162%" y="175.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (669 samples, 7.22%)</title><rect x="75.5316%" y="181" width="7.2207%" height="15" fill="rgb(220,39,43)" fg:x="6998" fg:w="669"/><text x="75.7816%" y="191.50">dft`core::..</text></g><g><title>dft`core::ptr::read_unaligned (629 samples, 6.79%)</title><rect x="75.9633%" y="165" width="6.7890%" height="15" fill="rgb(229,68,48)" fg:x="7038" fg:w="629"/><text x="76.2133%" y="175.50">dft`core:..</text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (537 samples, 5.80%)</title><rect x="76.9563%" y="149" width="5.7960%" height="15" fill="rgb(252,8,32)" fg:x="7130" fg:w="537"/><text x="77.2063%" y="159.50">dft`cor..</text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (230 samples, 2.48%)</title><rect x="80.2698%" y="133" width="2.4825%" height="15" fill="rgb(223,20,43)" fg:x="7437" fg:w="230"/><text x="80.5198%" y="143.50">df..</text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vceq_u8 (179 samples, 1.93%)</title><rect x="82.7523%" y="181" width="1.9320%" height="15" fill="rgb(229,81,49)" fg:x="7667" fg:w="179"/><text x="83.0023%" y="191.50">d..</text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (53 samples, 0.57%)</title><rect x="84.6843%" y="181" width="0.5720%" height="15" fill="rgb(236,28,36)" fg:x="7846" fg:w="53"/><text x="84.9343%" y="191.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vdup_n_u8 (67 samples, 0.72%)</title><rect x="85.2563%" y="181" width="0.7232%" height="15" fill="rgb(249,185,26)" fg:x="7899" fg:w="67"/><text x="85.5063%" y="191.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vget_lane_u64 (50 samples, 0.54%)</title><rect x="85.9795%" y="181" width="0.5397%" height="15" fill="rgb(249,174,33)" fg:x="7966" fg:w="50"/><text x="86.2295%" y="191.50"></text></g><g><title>dft`core::ptr::read_unaligned (1 samples, 0.01%)</title><rect x="86.5192%" y="181" width="0.0108%" height="15" fill="rgb(233,201,37)" fg:x="8016" fg:w="1"/><text x="86.7692%" y="191.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (94 samples, 1.01%)</title><rect x="86.5300%" y="181" width="1.0146%" height="15" fill="rgb(221,78,26)" fg:x="8017" fg:w="94"/><text x="86.7800%" y="191.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::cmp::PartialEq&gt;::eq (12 samples, 0.13%)</title><rect x="88.2461%" y="165" width="0.1295%" height="15" fill="rgb(250,127,30)" fg:x="8176" fg:w="12"/><text x="88.4961%" y="175.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::cmp::PartialEq&gt;::eq (102 samples, 1.10%)</title><rect x="88.6778%" y="149" width="1.1009%" height="15" fill="rgb(230,49,44)" fg:x="8216" fg:w="102"/><text x="88.9278%" y="159.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (260 samples, 2.81%)</title><rect x="87.5445%" y="181" width="2.8063%" height="15" fill="rgb(229,67,23)" fg:x="8111" fg:w="260"/><text x="87.7945%" y="191.50">df..</text></g><g><title>dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (183 samples, 1.98%)</title><rect x="88.3756%" y="165" width="1.9752%" height="15" fill="rgb(249,83,47)" fg:x="8188" fg:w="183"/><text x="88.6256%" y="175.50">d..</text></g><g><title>dft`&lt;cassowary::SymbolType as core::cmp::PartialEq&gt;::eq (53 samples, 0.57%)</title><rect x="89.7787%" y="149" width="0.5720%" height="15" fill="rgb(215,43,3)" fg:x="8318" fg:w="53"/><text x="90.0287%" y="159.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_byte (27 samples, 0.29%)</title><rect x="90.3508%" y="181" width="0.2914%" height="15" fill="rgb(238,154,13)" fg:x="8371" fg:w="27"/><text x="90.6008%" y="191.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (1,414 samples, 15.26%)</title><rect x="75.5316%" y="197" width="15.2617%" height="15" fill="rgb(219,56,2)" fg:x="6998" fg:w="1414"/><text x="75.7816%" y="207.50">dft`hashbrown::raw::Raw..</text></g><g><title>dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (14 samples, 0.15%)</title><rect x="90.6422%" y="181" width="0.1511%" height="15" fill="rgb(233,0,4)" fg:x="8398" fg:w="14"/><text x="90.8922%" y="191.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="90.7933%" y="197" width="0.0216%" height="15" fill="rgb(235,30,7)" fg:x="8412" fg:w="2"/><text x="91.0433%" y="207.50"></text></g><g><title>dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7,126 samples, 76.91%)</title><rect x="13.9665%" y="229" width="76.9131%" height="15" fill="rgb(250,79,13)" fg:x="1294" fg:w="7126"/><text x="14.2165%" y="239.50">dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6,804 samples, 73.44%)</title><rect x="17.4420%" y="213" width="73.4377%" height="15" fill="rgb(211,146,34)" fg:x="1616" fg:w="6804"/><text x="17.6920%" y="223.50">dft`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>dft`hashbrown::raw::neon::Group::match_byte (6 samples, 0.06%)</title><rect x="90.8149%" y="197" width="0.0648%" height="15" fill="rgb(228,22,38)" fg:x="8414" fg:w="6"/><text x="91.0649%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.01%)</title><rect x="90.8797%" y="197" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="8420" fg:w="1"/><text x="91.1297%" y="207.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (7 samples, 0.08%)</title><rect x="90.9984%" y="149" width="0.0756%" height="15" fill="rgb(221,155,16)" fg:x="8431" fg:w="7"/><text x="91.2484%" y="159.50"></text></g><g><title>dft`core::ptr::read_unaligned (6 samples, 0.06%)</title><rect x="91.0092%" y="133" width="0.0648%" height="15" fill="rgb(215,215,53)" fg:x="8432" fg:w="6"/><text x="91.2592%" y="143.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.05%)</title><rect x="91.0200%" y="117" width="0.0540%" height="15" fill="rgb(223,4,10)" fg:x="8433" fg:w="5"/><text x="91.2700%" y="127.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (4 samples, 0.04%)</title><rect x="91.0308%" y="101" width="0.0432%" height="15" fill="rgb(234,103,6)" fg:x="8434" fg:w="4"/><text x="91.2808%" y="111.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (1 samples, 0.01%)</title><rect x="91.0739%" y="133" width="0.0108%" height="15" fill="rgb(227,97,0)" fg:x="8438" fg:w="1"/><text x="91.3239%" y="143.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (4 samples, 0.04%)</title><rect x="91.0847%" y="133" width="0.0432%" height="15" fill="rgb(234,150,53)" fg:x="8439" fg:w="4"/><text x="91.3347%" y="143.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::find_insert_slot_in_group (6 samples, 0.06%)</title><rect x="91.0739%" y="149" width="0.0648%" height="15" fill="rgb(228,201,54)" fg:x="8438" fg:w="6"/><text x="91.3239%" y="159.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_empty_or_deleted (1 samples, 0.01%)</title><rect x="91.1279%" y="133" width="0.0108%" height="15" fill="rgb(222,22,37)" fg:x="8443" fg:w="1"/><text x="91.3779%" y="143.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::find_insert_slot (15 samples, 0.16%)</title><rect x="90.9876%" y="165" width="0.1619%" height="15" fill="rgb(237,53,32)" fg:x="8430" fg:w="15"/><text x="91.2376%" y="175.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.01%)</title><rect x="91.1387%" y="149" width="0.0108%" height="15" fill="rgb(233,25,53)" fg:x="8444" fg:w="1"/><text x="91.3887%" y="159.50"></text></g><g><title>dft`cassowary::Row::insert_symbol (7,240 samples, 78.14%)</title><rect x="13.0167%" y="245" width="78.1436%" height="15" fill="rgb(210,40,34)" fg:x="1206" fg:w="7240"/><text x="13.2667%" y="255.50">dft`cassowary::Row::insert_symbol</text></g><g><title>dft`std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (26 samples, 0.28%)</title><rect x="90.8797%" y="229" width="0.2806%" height="15" fill="rgb(241,220,44)" fg:x="8420" fg:w="26"/><text x="91.1297%" y="239.50"></text></g><g><title>dft`hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (26 samples, 0.28%)</title><rect x="90.8797%" y="213" width="0.2806%" height="15" fill="rgb(235,28,35)" fg:x="8420" fg:w="26"/><text x="91.1297%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (25 samples, 0.27%)</title><rect x="90.8904%" y="197" width="0.2698%" height="15" fill="rgb(210,56,17)" fg:x="8421" fg:w="25"/><text x="91.1404%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::prepare_insert_slot (20 samples, 0.22%)</title><rect x="90.9444%" y="181" width="0.2159%" height="15" fill="rgb(224,130,29)" fg:x="8426" fg:w="20"/><text x="91.1944%" y="191.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.01%)</title><rect x="91.1495%" y="165" width="0.0108%" height="15" fill="rgb(235,212,8)" fg:x="8445" fg:w="1"/><text x="91.3995%" y="175.50"></text></g><g><title>dft`cassowary::near_zero (504 samples, 5.44%)</title><rect x="91.1603%" y="245" width="5.4398%" height="15" fill="rgb(223,33,50)" fg:x="8446" fg:w="504"/><text x="91.4103%" y="255.50">dft`cas..</text></g><g><title>dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (10 samples, 0.11%)</title><rect x="96.6001%" y="245" width="0.1079%" height="15" fill="rgb(219,149,13)" fg:x="8950" fg:w="10"/><text x="96.8501%" y="255.50"></text></g><g><title>dft`std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::get_mut (145 samples, 1.57%)</title><rect x="96.7080%" y="245" width="1.5650%" height="15" fill="rgb(250,156,29)" fg:x="8960" fg:w="145"/><text x="96.9580%" y="255.50"></text></g><g><title>dft`cassowary::Row::insert_row (8,923 samples, 96.31%)</title><rect x="1.9860%" y="261" width="96.3087%" height="15" fill="rgb(216,193,19)" fg:x="184" fg:w="8923"/><text x="2.2360%" y="271.50">dft`cassowary::Row::insert_row</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="98.2731%" y="245" width="0.0216%" height="15" fill="rgb(216,135,14)" fg:x="9105" fg:w="2"/><text x="98.5231%" y="255.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="98.3162%" y="229" width="0.0108%" height="15" fill="rgb(241,47,5)" fg:x="9109" fg:w="1"/><text x="98.5662%" y="239.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="98.3594%" y="181" width="0.0216%" height="15" fill="rgb(233,42,35)" fg:x="9113" fg:w="2"/><text x="98.6094%" y="191.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.26%)</title><rect x="98.3486%" y="197" width="0.2590%" height="15" fill="rgb(231,13,6)" fg:x="9112" fg:w="24"/><text x="98.5986%" y="207.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (21 samples, 0.23%)</title><rect x="98.3810%" y="181" width="0.2267%" height="15" fill="rgb(207,181,40)" fg:x="9115" fg:w="21"/><text x="98.6310%" y="191.50"></text></g><g><title>dft`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.08%)</title><rect x="98.6077%" y="197" width="0.0756%" height="15" fill="rgb(254,173,49)" fg:x="9136" fg:w="7"/><text x="98.8577%" y="207.50"></text></g><g><title>dft`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="98.6832%" y="197" width="0.0108%" height="15" fill="rgb(221,1,38)" fg:x="9143" fg:w="1"/><text x="98.9332%" y="207.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="98.6940%" y="85" width="0.0324%" height="15" fill="rgb(206,124,46)" fg:x="9144" fg:w="3"/><text x="98.9440%" y="95.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="98.7048%" y="69" width="0.0216%" height="15" fill="rgb(249,21,11)" fg:x="9145" fg:w="2"/><text x="98.9548%" y="79.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::hash::Hash&gt;::hash (11 samples, 0.12%)</title><rect x="98.6940%" y="165" width="0.1187%" height="15" fill="rgb(222,201,40)" fg:x="9144" fg:w="11"/><text x="98.9440%" y="175.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for isize&gt;::hash (11 samples, 0.12%)</title><rect x="98.6940%" y="149" width="0.1187%" height="15" fill="rgb(235,61,29)" fg:x="9144" fg:w="11"/><text x="98.9440%" y="159.50"></text></g><g><title>dft`core::hash::Hasher::write_isize (11 samples, 0.12%)</title><rect x="98.6940%" y="133" width="0.1187%" height="15" fill="rgb(219,207,3)" fg:x="9144" fg:w="11"/><text x="98.9440%" y="143.50"></text></g><g><title>dft`core::hash::Hasher::write_usize (11 samples, 0.12%)</title><rect x="98.6940%" y="117" width="0.1187%" height="15" fill="rgb(222,56,46)" fg:x="9144" fg:w="11"/><text x="98.9440%" y="127.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.12%)</title><rect x="98.6940%" y="101" width="0.1187%" height="15" fill="rgb(239,76,54)" fg:x="9144" fg:w="11"/><text x="98.9440%" y="111.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.09%)</title><rect x="98.7264%" y="85" width="0.0863%" height="15" fill="rgb(231,124,27)" fg:x="9147" fg:w="8"/><text x="98.9764%" y="95.50"></text></g><g><title>dft`core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="98.9638%" y="101" width="0.0108%" height="15" fill="rgb(249,195,6)" fg:x="9169" fg:w="1"/><text x="99.2138%" y="111.50"></text></g><g><title>dft`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.22%)</title><rect x="98.8127%" y="117" width="0.2159%" height="15" fill="rgb(237,174,47)" fg:x="9155" fg:w="20"/><text x="99.0627%" y="127.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.05%)</title><rect x="98.9746%" y="101" width="0.0540%" height="15" fill="rgb(206,201,31)" fg:x="9170" fg:w="5"/><text x="99.2246%" y="111.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (32 samples, 0.35%)</title><rect x="98.6940%" y="197" width="0.3454%" height="15" fill="rgb(231,57,52)" fg:x="9144" fg:w="32"/><text x="98.9440%" y="207.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::hash::Hash&gt;::hash (32 samples, 0.35%)</title><rect x="98.6940%" y="181" width="0.3454%" height="15" fill="rgb(248,177,22)" fg:x="9144" fg:w="32"/><text x="98.9440%" y="191.50"></text></g><g><title>dft`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (21 samples, 0.23%)</title><rect x="98.8127%" y="165" width="0.2267%" height="15" fill="rgb(215,211,37)" fg:x="9155" fg:w="21"/><text x="99.0627%" y="175.50"></text></g><g><title>dft`core::hash::Hasher::write_usize (21 samples, 0.23%)</title><rect x="98.8127%" y="149" width="0.2267%" height="15" fill="rgb(241,128,51)" fg:x="9155" fg:w="21"/><text x="99.0627%" y="159.50"></text></g><g><title>dft`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.23%)</title><rect x="98.8127%" y="133" width="0.2267%" height="15" fill="rgb(227,165,31)" fg:x="9155" fg:w="21"/><text x="99.0627%" y="143.50"></text></g><g><title>dft`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="99.0286%" y="117" width="0.0108%" height="15" fill="rgb(228,167,24)" fg:x="9175" fg:w="1"/><text x="99.2786%" y="127.50"></text></g><g><title>dft`core::hash::BuildHasher::hash_one (68 samples, 0.73%)</title><rect x="98.3378%" y="213" width="0.7339%" height="15" fill="rgb(228,143,12)" fg:x="9111" fg:w="68"/><text x="98.5878%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="99.0394%" y="197" width="0.0324%" height="15" fill="rgb(249,149,8)" fg:x="9176" fg:w="3"/><text x="99.2894%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.04%)</title><rect x="99.0718%" y="213" width="0.0432%" height="15" fill="rgb(243,35,44)" fg:x="9179" fg:w="4"/><text x="99.3218%" y="223.50"></text></g><g><title>dft`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.06%)</title><rect x="99.1149%" y="197" width="0.0648%" height="15" fill="rgb(246,89,9)" fg:x="9183" fg:w="6"/><text x="99.3649%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.06%)</title><rect x="99.1797%" y="197" width="0.0648%" height="15" fill="rgb(233,213,13)" fg:x="9189" fg:w="6"/><text x="99.4297%" y="207.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::to_base_index (4 samples, 0.04%)</title><rect x="99.2445%" y="197" width="0.0432%" height="15" fill="rgb(233,141,41)" fg:x="9195" fg:w="4"/><text x="99.4945%" y="207.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (9 samples, 0.10%)</title><rect x="99.3848%" y="181" width="0.0971%" height="15" fill="rgb(239,167,4)" fg:x="9208" fg:w="9"/><text x="99.6348%" y="191.50"></text></g><g><title>dft`core::ptr::read_unaligned (8 samples, 0.09%)</title><rect x="99.3956%" y="165" width="0.0863%" height="15" fill="rgb(209,217,16)" fg:x="9209" fg:w="8"/><text x="99.6456%" y="175.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (8 samples, 0.09%)</title><rect x="99.3956%" y="149" width="0.0863%" height="15" fill="rgb(219,88,35)" fg:x="9209" fg:w="8"/><text x="99.6456%" y="159.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.08%)</title><rect x="99.4064%" y="133" width="0.0756%" height="15" fill="rgb(220,193,23)" fg:x="9210" fg:w="7"/><text x="99.6564%" y="143.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vceq_u8 (3 samples, 0.03%)</title><rect x="99.4819%" y="181" width="0.0324%" height="15" fill="rgb(230,90,52)" fg:x="9217" fg:w="3"/><text x="99.7319%" y="191.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.02%)</title><rect x="99.5143%" y="181" width="0.0216%" height="15" fill="rgb(252,106,19)" fg:x="9220" fg:w="2"/><text x="99.7643%" y="191.50"></text></g><g><title>dft`&lt;cassowary::Symbol as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="99.5467%" y="133" width="0.0432%" height="15" fill="rgb(206,74,20)" fg:x="9223" fg:w="4"/><text x="99.7967%" y="143.50"></text></g><g><title>dft`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.08%)</title><rect x="99.5467%" y="149" width="0.0756%" height="15" fill="rgb(230,138,44)" fg:x="9223" fg:w="7"/><text x="99.7967%" y="159.50"></text></g><g><title>dft`&lt;cassowary::SymbolType as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="99.5899%" y="133" width="0.0324%" height="15" fill="rgb(235,182,43)" fg:x="9227" fg:w="3"/><text x="99.8399%" y="143.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.36%)</title><rect x="99.2876%" y="197" width="0.3562%" height="15" fill="rgb(242,16,51)" fg:x="9199" fg:w="33"/><text x="99.5376%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (10 samples, 0.11%)</title><rect x="99.5359%" y="181" width="0.1079%" height="15" fill="rgb(248,9,4)" fg:x="9222" fg:w="10"/><text x="99.7859%" y="191.50"></text></g><g><title>dft`hashbrown::map::equivalent_key::_{{closure}} (9 samples, 0.10%)</title><rect x="99.5467%" y="165" width="0.0971%" height="15" fill="rgb(210,31,22)" fg:x="9223" fg:w="9"/><text x="99.7967%" y="175.50"></text></g><g><title>dft`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.02%)</title><rect x="99.6222%" y="149" width="0.0216%" height="15" fill="rgb(239,54,39)" fg:x="9230" fg:w="2"/><text x="99.8722%" y="159.50"></text></g><g><title>dft`hashbrown::raw::Bucket&lt;T&gt;::to_base_index (1 samples, 0.01%)</title><rect x="99.6762%" y="181" width="0.0108%" height="15" fill="rgb(230,99,41)" fg:x="9235" fg:w="1"/><text x="99.9262%" y="191.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="99.7302%" y="133" width="0.0108%" height="15" fill="rgb(253,106,12)" fg:x="9240" fg:w="1"/><text x="99.9802%" y="143.50"></text></g><g><title>dft`core::core_arch::aarch64::neon::vld1_u8 (12 samples, 0.13%)</title><rect x="99.7302%" y="149" width="0.1295%" height="15" fill="rgb(213,46,41)" fg:x="9240" fg:w="12"/><text x="99.9802%" y="159.50"></text></g><g><title>dft`core::ptr::read_unaligned (11 samples, 0.12%)</title><rect x="99.7410%" y="133" width="0.1187%" height="15" fill="rgb(215,133,35)" fg:x="9241" fg:w="11"/><text x="99.9910%" y="143.50"></text></g><g><title>dft`core::intrinsics::copy_nonoverlapping::precondition_check (11 samples, 0.12%)</title><rect x="99.7410%" y="117" width="0.1187%" height="15" fill="rgb(213,28,5)" fg:x="9241" fg:w="11"/><text x="99.9910%" y="127.50"></text></g><g><title>dft`core::ub_checks::is_nonoverlapping::runtime (6 samples, 0.06%)</title><rect x="99.7949%" y="101" width="0.0648%" height="15" fill="rgb(215,77,49)" fg:x="9246" fg:w="6"/><text x="100.0449%" y="111.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vceq_u8 (1 samples, 0.01%)</title><rect x="99.8597%" y="149" width="0.0108%" height="15" fill="rgb(248,100,22)" fg:x="9252" fg:w="1"/><text x="100.1097%" y="159.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="99.8705%" y="149" width="0.0108%" height="15" fill="rgb(208,67,9)" fg:x="9253" fg:w="1"/><text x="100.1205%" y="159.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vdup_n_u8 (1 samples, 0.01%)</title><rect x="99.8813%" y="149" width="0.0108%" height="15" fill="rgb(219,133,21)" fg:x="9254" fg:w="1"/><text x="100.1313%" y="159.50"></text></g><g><title>dft`core::core_arch::arm_shared::neon::vget_lane_u64 (1 samples, 0.01%)</title><rect x="99.8921%" y="149" width="0.0108%" height="15" fill="rgb(246,46,29)" fg:x="9255" fg:w="1"/><text x="100.1421%" y="159.50"></text></g><g><title>dft`hashbrown::raw::RawTableInner::erase (25 samples, 0.27%)</title><rect x="99.6978%" y="165" width="0.2698%" height="15" fill="rgb(246,185,52)" fg:x="9237" fg:w="25"/><text x="99.9478%" y="175.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_byte (6 samples, 0.06%)</title><rect x="99.9029%" y="149" width="0.0648%" height="15" fill="rgb(252,136,11)" fg:x="9256" fg:w="6"/><text x="100.1529%" y="159.50"></text></g><g><title>dft`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (156 samples, 1.68%)</title><rect x="98.2947%" y="261" width="1.6838%" height="15" fill="rgb(219,138,53)" fg:x="9107" fg:w="156"/><text x="98.5447%" y="271.50"></text></g><g><title>dft`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (156 samples, 1.68%)</title><rect x="98.2947%" y="245" width="1.6838%" height="15" fill="rgb(211,51,23)" fg:x="9107" fg:w="156"/><text x="98.5447%" y="255.50"></text></g><g><title>dft`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (153 samples, 1.65%)</title><rect x="98.3270%" y="229" width="1.6514%" height="15" fill="rgb(247,221,28)" fg:x="9110" fg:w="153"/><text x="98.5770%" y="239.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (80 samples, 0.86%)</title><rect x="99.1149%" y="213" width="0.8635%" height="15" fill="rgb(251,222,45)" fg:x="9183" fg:w="80"/><text x="99.3649%" y="223.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::remove (31 samples, 0.33%)</title><rect x="99.6438%" y="197" width="0.3346%" height="15" fill="rgb(217,162,53)" fg:x="9232" fg:w="31"/><text x="99.8938%" y="207.50"></text></g><g><title>dft`hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (27 samples, 0.29%)</title><rect x="99.6870%" y="181" width="0.2914%" height="15" fill="rgb(229,93,14)" fg:x="9236" fg:w="27"/><text x="99.9370%" y="191.50"></text></g><g><title>dft`hashbrown::raw::neon::Group::match_byte (1 samples, 0.01%)</title><rect x="99.9676%" y="165" width="0.0108%" height="15" fill="rgb(209,67,49)" fg:x="9262" fg:w="1"/><text x="100.2176%" y="175.50"></text></g><g><title>dyld`start (9,264 samples, 99.99%)</title><rect x="0.0000%" y="1013" width="99.9892%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="1023.50">dyld`start</text></g><g><title>dft`main (9,264 samples, 99.99%)</title><rect x="0.0000%" y="997" width="99.9892%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="1007.50">dft`main</text></g><g><title>dft`std::rt::lang_start (9,264 samples, 99.99%)</title><rect x="0.0000%" y="981" width="99.9892%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="991.50">dft`std::rt::lang_start</text></g><g><title>dft`std::rt::lang_start_internal (9,264 samples, 99.99%)</title><rect x="0.0000%" y="965" width="99.9892%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="975.50">dft`std::rt::lang_start_internal</text></g><g><title>dft`std::rt::lang_start::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="949" width="99.9892%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="959.50">dft`std::rt::lang_start::_{{closure}}</text></g><g><title>dft`std::sys_common::backtrace::__rust_begin_short_backtrace (9,264 samples, 99.99%)</title><rect x="0.0000%" y="933" width="99.9892%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="943.50">dft`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dft`core::ops::function::FnOnce::call_once (9,264 samples, 99.99%)</title><rect x="0.0000%" y="917" width="99.9892%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="927.50">dft`core::ops::function::FnOnce::call_once</text></g><g><title>dft`dft::main (9,264 samples, 99.99%)</title><rect x="0.0000%" y="901" width="99.9892%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="911.50">dft`dft::main</text></g><g><title>dft`tokio::runtime::runtime::Runtime::block_on (9,264 samples, 99.99%)</title><rect x="0.0000%" y="885" width="99.9892%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="895.50">dft`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>dft`tokio::runtime::runtime::Runtime::block_on_inner (9,264 samples, 99.99%)</title><rect x="0.0000%" y="869" width="99.9892%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="879.50">dft`tokio::runtime::runtime::Runtime::block_on_inner</text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (9,264 samples, 99.99%)</title><rect x="0.0000%" y="853" width="99.9892%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="863.50">dft`tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>dft`tokio::runtime::context::runtime::enter_runtime (9,264 samples, 99.99%)</title><rect x="0.0000%" y="837" width="99.9892%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="847.50">dft`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="821" width="99.9892%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="831.50">dft`tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}}</text></g><g><title>dft`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (9,264 samples, 99.99%)</title><rect x="0.0000%" y="805" width="99.9892%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="815.50">dft`tokio::runtime::context::blocking::BlockingRegionGuard::block_on</text></g><g><title>dft`tokio::runtime::park::CachedParkThread::block_on (9,264 samples, 99.99%)</title><rect x="0.0000%" y="789" width="99.9892%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="799.50">dft`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>dft`tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="773" width="99.9892%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="783.50">dft`tokio::runtime::park::CachedParkThread::block_on::_{{closure}}</text></g><g><title>dft`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,264 samples, 99.99%)</title><rect x="0.0000%" y="757" width="99.9892%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="767.50">dft`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>dft`dft::main::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="741" width="99.9892%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="751.50">dft`dft::main::_{{closure}}</text></g><g><title>dft`dft::app::App::run_app::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="725" width="99.9892%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="735.50">dft`dft::app::App::run_app::_{{closure}}</text></g><g><title>dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::draw (9,264 samples, 99.99%)</title><rect x="0.0000%" y="709" width="99.9892%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="719.50">dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::draw</text></g><g><title>dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (9,264 samples, 99.99%)</title><rect x="0.0000%" y="693" width="99.9892%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="703.50">dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::draw::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="677" width="99.9892%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="687.50">dft`ratatui::terminal::terminal::Terminal&lt;B&gt;::draw::_{{closure}}</text></g><g><title>dft`dft::app::App::run_app::_{{closure}}::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="661" width="99.9892%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="671.50">dft`dft::app::App::run_app::_{{closure}}::_{{closure}}</text></g><g><title>dft`ratatui::terminal::frame::Frame::render_widget (9,264 samples, 99.99%)</title><rect x="0.0000%" y="645" width="99.9892%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="655.50">dft`ratatui::terminal::frame::Frame::render_widget</text></g><g><title>dft`&lt;&amp;dft::app::App as ratatui::widgets::Widget&gt;::render (9,264 samples, 99.99%)</title><rect x="0.0000%" y="629" width="99.9892%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="639.50">dft`&lt;&amp;dft::app::App as ratatui::widgets::Widget&gt;::render</text></g><g><title>dft`dft::app::ui::SelectedTab::render (9,264 samples, 99.99%)</title><rect x="0.0000%" y="613" width="99.9892%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="623.50">dft`dft::app::ui::SelectedTab::render</text></g><g><title>dft`dft::app::ui::SelectedTab::render_flightsql (9,264 samples, 99.99%)</title><rect x="0.0000%" y="597" width="99.9892%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="607.50">dft`dft::app::ui::SelectedTab::render_flightsql</text></g><g><title>dft`dft::app::ui::tabs::flightsql::render_sql (9,264 samples, 99.99%)</title><rect x="0.0000%" y="581" width="99.9892%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="591.50">dft`dft::app::ui::tabs::flightsql::render_sql</text></g><g><title>dft`dft::app::ui::tabs::flightsql::render_sql_results (9,264 samples, 99.99%)</title><rect x="0.0000%" y="565" width="99.9892%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="575.50">dft`dft::app::ui::tabs::flightsql::render_sql_results</text></g><g><title>dft`&lt;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidget&gt;::render (9,264 samples, 99.99%)</title><rect x="0.0000%" y="549" width="99.9892%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="559.50">dft`&lt;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidget&gt;::render</text></g><g><title>dft`&lt;&amp;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidget&gt;::render (9,264 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9892%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="543.50">dft`&lt;&amp;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidget&gt;::render</text></g><g><title>dft`&lt;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidgetRef&gt;::render_ref (9,264 samples, 99.99%)</title><rect x="0.0000%" y="517" width="99.9892%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="527.50">dft`&lt;ratatui::widgets::table::table::Table as ratatui::widgets::StatefulWidgetRef&gt;::render_ref</text></g><g><title>dft`ratatui::widgets::table::table::Table::get_columns_widths (9,264 samples, 99.99%)</title><rect x="0.0000%" y="501" width="99.9892%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="511.50">dft`ratatui::widgets::table::table::Table::get_columns_widths</text></g><g><title>dft`ratatui::layout::layout::Layout::split (9,264 samples, 99.99%)</title><rect x="0.0000%" y="485" width="99.9892%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="495.50">dft`ratatui::layout::layout::Layout::split</text></g><g><title>dft`ratatui::layout::layout::Layout::split_with_spacers (9,264 samples, 99.99%)</title><rect x="0.0000%" y="469" width="99.9892%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="479.50">dft`ratatui::layout::layout::Layout::split_with_spacers</text></g><g><title>dft`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (9,264 samples, 99.99%)</title><rect x="0.0000%" y="453" width="99.9892%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="463.50">dft`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut</text></g><g><title>dft`std::thread::local::LocalKey&lt;T&gt;::try_with (9,264 samples, 99.99%)</title><rect x="0.0000%" y="437" width="99.9892%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="447.50">dft`std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>dft`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="421" width="99.9892%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="431.50">dft`std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}}</text></g><g><title>dft`ratatui::layout::layout::Layout::split_with_spacers::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9892%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="415.50">dft`ratatui::layout::layout::Layout::split_with_spacers::_{{closure}}</text></g><g><title>dft`lru::LruCache&lt;K,V,S&gt;::get_or_insert (9,264 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9892%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="399.50">dft`lru::LruCache&lt;K,V,S&gt;::get_or_insert</text></g><g><title>dft`ratatui::layout::layout::Layout::split_with_spacers::_{{closure}}::_{{closure}} (9,264 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9892%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="383.50">dft`ratatui::layout::layout::Layout::split_with_spacers::_{{closure}}::_{{closure}}</text></g><g><title>dft`ratatui::layout::layout::Layout::try_split (9,264 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9892%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="367.50">dft`ratatui::layout::layout::Layout::try_split</text></g><g><title>dft`ratatui::layout::layout::configure_fill_constraints (9,264 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9892%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="351.50">dft`ratatui::layout::layout::configure_fill_constraints</text></g><g><title>dft`cassowary::solver_impl::Solver::add_constraint (9,264 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9892%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="335.50">dft`cassowary::solver_impl::Solver::add_constraint</text></g><g><title>dft`cassowary::solver_impl::Solver::optimise (9,264 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9892%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="9264"/><text x="0.2500%" y="319.50">dft`cassowary::solver_impl::Solver::optimise</text></g><g><title>dft`cassowary::solver_impl::Solver::substitute (9,162 samples, 98.89%)</title><rect x="1.1009%" y="293" width="98.8883%" height="15" fill="rgb(232,111,31)" fg:x="102" fg:w="9162"/><text x="1.3509%" y="303.50">dft`cassowary::solver_impl::Solver::substitute</text></g><g><title>dft`cassowary::Row::substitute (9,152 samples, 98.78%)</title><rect x="1.2089%" y="277" width="98.7804%" height="15" fill="rgb(245,82,37)" fg:x="112" fg:w="9152"/><text x="1.4589%" y="287.50">dft`cassowary::Row::substitute</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="99.9784%" y="261" width="0.0108%" height="15" fill="rgb(227,149,46)" fg:x="9263" fg:w="1"/><text x="100.2284%" y="271.50"></text></g><g><title>all (9,265 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="9265"/><text x="0.2500%" y="1039.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1 samples, 0.01%)</title><rect x="99.9892%" y="1013" width="0.0108%" height="15" fill="rgb(226,80,48)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="1023.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (1 samples, 0.01%)</title><rect x="99.9892%" y="997" width="0.0108%" height="15" fill="rgb(238,224,15)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="1007.50"></text></g><g><title>dft`std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.01%)</title><rect x="99.9892%" y="981" width="0.0108%" height="15" fill="rgb(241,136,10)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="991.50"></text></g><g><title>dft`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.01%)</title><rect x="99.9892%" y="965" width="0.0108%" height="15" fill="rgb(208,32,45)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="975.50"></text></g><g><title>dft`std::thread::Builder::spawn_unchecked_::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="949" width="0.0108%" height="15" fill="rgb(207,135,9)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="959.50"></text></g><g><title>dft`std::panicking::try (1 samples, 0.01%)</title><rect x="99.9892%" y="933" width="0.0108%" height="15" fill="rgb(206,86,44)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="943.50"></text></g><g><title>dft`__rust_try (1 samples, 0.01%)</title><rect x="99.9892%" y="917" width="0.0108%" height="15" fill="rgb(245,177,15)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="927.50"></text></g><g><title>dft`std::panicking::try::do_call (1 samples, 0.01%)</title><rect x="99.9892%" y="901" width="0.0108%" height="15" fill="rgb(206,64,50)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="911.50"></text></g><g><title>dft`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="99.9892%" y="885" width="0.0108%" height="15" fill="rgb(234,36,40)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="895.50"></text></g><g><title>dft`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="869" width="0.0108%" height="15" fill="rgb(213,64,8)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="879.50"></text></g><g><title>dft`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.01%)</title><rect x="99.9892%" y="853" width="0.0108%" height="15" fill="rgb(210,75,36)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="863.50"></text></g><g><title>dft`tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="837" width="0.0108%" height="15" fill="rgb(229,88,21)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="847.50"></text></g><g><title>dft`tokio::runtime::blocking::pool::Inner::run (1 samples, 0.01%)</title><rect x="99.9892%" y="821" width="0.0108%" height="15" fill="rgb(252,204,47)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="831.50"></text></g><g><title>dft`tokio::runtime::blocking::pool::Task::run (1 samples, 0.01%)</title><rect x="99.9892%" y="805" width="0.0108%" height="15" fill="rgb(208,77,27)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="815.50"></text></g><g><title>dft`tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.01%)</title><rect x="99.9892%" y="789" width="0.0108%" height="15" fill="rgb(221,76,26)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="799.50"></text></g><g><title>dft`tokio::runtime::task::raw::RawTask::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="773" width="0.0108%" height="15" fill="rgb(225,139,18)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="783.50"></text></g><g><title>dft`tokio::runtime::task::raw::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="757" width="0.0108%" height="15" fill="rgb(230,137,11)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="767.50"></text></g><g><title>dft`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="741" width="0.0108%" height="15" fill="rgb(212,28,1)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="751.50"></text></g><g><title>dft`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.01%)</title><rect x="99.9892%" y="725" width="0.0108%" height="15" fill="rgb(248,164,17)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="735.50"></text></g><g><title>dft`tokio::runtime::task::harness::poll_future (1 samples, 0.01%)</title><rect x="99.9892%" y="709" width="0.0108%" height="15" fill="rgb(222,171,42)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="719.50"></text></g><g><title>dft`std::panic::catch_unwind (1 samples, 0.01%)</title><rect x="99.9892%" y="693" width="0.0108%" height="15" fill="rgb(243,84,45)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="703.50"></text></g><g><title>dft`std::panicking::try (1 samples, 0.01%)</title><rect x="99.9892%" y="677" width="0.0108%" height="15" fill="rgb(252,49,23)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="687.50"></text></g><g><title>dft`__rust_try (1 samples, 0.01%)</title><rect x="99.9892%" y="661" width="0.0108%" height="15" fill="rgb(215,19,7)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="671.50"></text></g><g><title>dft`std::panicking::try::do_call (1 samples, 0.01%)</title><rect x="99.9892%" y="645" width="0.0108%" height="15" fill="rgb(238,81,41)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="655.50"></text></g><g><title>dft`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="99.9892%" y="629" width="0.0108%" height="15" fill="rgb(210,199,37)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="639.50"></text></g><g><title>dft`tokio::runtime::task::harness::poll_future::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="613" width="0.0108%" height="15" fill="rgb(244,192,49)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="623.50"></text></g><g><title>dft`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="597" width="0.0108%" height="15" fill="rgb(226,211,11)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="607.50"></text></g><g><title>dft`tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="581" width="0.0108%" height="15" fill="rgb(236,162,54)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="591.50"></text></g><g><title>dft`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="565" width="0.0108%" height="15" fill="rgb(220,229,9)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="575.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="549" width="0.0108%" height="15" fill="rgb(250,87,22)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="559.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 0.01%)</title><rect x="99.9892%" y="533" width="0.0108%" height="15" fill="rgb(239,43,17)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="543.50"></text></g><g><title>dft`tokio::runtime::context::runtime::enter_runtime (1 samples, 0.01%)</title><rect x="99.9892%" y="517" width="0.0108%" height="15" fill="rgb(231,177,25)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="527.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="501" width="0.0108%" height="15" fill="rgb(219,179,1)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="511.50"></text></g><g><title>dft`tokio::runtime::context::set_scheduler (1 samples, 0.01%)</title><rect x="99.9892%" y="485" width="0.0108%" height="15" fill="rgb(238,219,53)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="495.50"></text></g><g><title>dft`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9892%" y="469" width="0.0108%" height="15" fill="rgb(232,167,36)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="479.50"></text></g><g><title>dft`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="99.9892%" y="453" width="0.0108%" height="15" fill="rgb(244,19,51)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="463.50"></text></g><g><title>dft`tokio::runtime::context::set_scheduler::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="437" width="0.0108%" height="15" fill="rgb(224,6,22)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="447.50"></text></g><g><title>dft`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="99.9892%" y="421" width="0.0108%" height="15" fill="rgb(224,145,5)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="431.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9892%" y="405" width="0.0108%" height="15" fill="rgb(234,130,49)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="415.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 0.01%)</title><rect x="99.9892%" y="389" width="0.0108%" height="15" fill="rgb(254,6,2)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="399.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::Context::park (1 samples, 0.01%)</title><rect x="99.9892%" y="373" width="0.0108%" height="15" fill="rgb(208,96,46)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="383.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.01%)</title><rect x="99.9892%" y="357" width="0.0108%" height="15" fill="rgb(239,3,39)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="367.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.01%)</title><rect x="99.9892%" y="341" width="0.0108%" height="15" fill="rgb(233,210,1)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="351.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::park::Inner::park (1 samples, 0.01%)</title><rect x="99.9892%" y="325" width="0.0108%" height="15" fill="rgb(244,137,37)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="335.50"></text></g><g><title>dft`tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (1 samples, 0.01%)</title><rect x="99.9892%" y="309" width="0.0108%" height="15" fill="rgb(240,136,2)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="319.50"></text></g><g><title>dft`tokio::runtime::driver::Driver::park (1 samples, 0.01%)</title><rect x="99.9892%" y="293" width="0.0108%" height="15" fill="rgb(239,18,37)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="303.50"></text></g><g><title>dft`tokio::runtime::driver::TimeDriver::park (1 samples, 0.01%)</title><rect x="99.9892%" y="277" width="0.0108%" height="15" fill="rgb(218,185,22)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="287.50"></text></g><g><title>dft`tokio::runtime::time::Driver::park (1 samples, 0.01%)</title><rect x="99.9892%" y="261" width="0.0108%" height="15" fill="rgb(225,218,4)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="271.50"></text></g><g><title>dft`tokio::runtime::time::Driver::park_internal (1 samples, 0.01%)</title><rect x="99.9892%" y="245" width="0.0108%" height="15" fill="rgb(230,182,32)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="255.50"></text></g><g><title>dft`tokio::runtime::time::Driver::park_thread_timeout (1 samples, 0.01%)</title><rect x="99.9892%" y="229" width="0.0108%" height="15" fill="rgb(242,56,43)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="239.50"></text></g><g><title>dft`tokio::runtime::driver::IoStack::park_timeout (1 samples, 0.01%)</title><rect x="99.9892%" y="213" width="0.0108%" height="15" fill="rgb(233,99,24)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="223.50"></text></g><g><title>dft`tokio::runtime::io::driver::Driver::park_timeout (1 samples, 0.01%)</title><rect x="99.9892%" y="197" width="0.0108%" height="15" fill="rgb(234,209,42)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="207.50"></text></g><g><title>dft`tokio::runtime::io::driver::Driver::turn (1 samples, 0.01%)</title><rect x="99.9892%" y="181" width="0.0108%" height="15" fill="rgb(227,7,12)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="191.50"></text></g><g><title>dft`mio::poll::Poll::poll (1 samples, 0.01%)</title><rect x="99.9892%" y="165" width="0.0108%" height="15" fill="rgb(245,203,43)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.01%)</title><rect x="99.9892%" y="149" width="0.0108%" height="15" fill="rgb(238,205,33)" fg:x="9264" fg:w="1"/><text x="100.2392%" y="159.50"></text></g></svg></svg>